{"version":3,"sources":["components/Pomodoro.js","components/todoList/Todo.js","components/todoList/NewTodoForm.js","components/todoList/TodoList.js","components/PomoTodo.js","App.js","serviceWorker.js","index.js"],"names":["Pomodoro","className","Component","Todo","props","handleDelete","bind","this","removeTodo","id","desc","onClick","NewTodoForm","state","handleChange","handleSubmit","event","setState","target","name","value","preventDefault","newTodo","uuid","addTodo","onSubmit","htmlFor","type","onChange","TodoList","todos","delTodoId","filter","todo","map","key","PomoTodo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAYeA,E,uKARX,OACE,yBAAKC,UAAU,YACb,uD,GAJeC,a,eCqBRC,G,wDAnBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,2DAMjBC,KAAKH,MAAMI,WAAWD,KAAKH,MAAMK,M,+BAIjC,OACE,yBAAKR,UAAU,QACb,2BAAIM,KAAKH,MAAMM,MACf,4BAAQC,QAASJ,KAAKF,cAAtB,e,GAdWH,c,sBC2CJU,G,wDAzCb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXH,KAAM,IAER,EAAKI,aAAe,EAAKA,aAAaR,KAAlB,gBACpB,EAAKS,aAAe,EAAKA,aAAaT,KAAlB,gBANH,E,yDASNU,GACXT,KAAKU,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,U,mCAIzBJ,GACXA,EAAMK,iBACN,IAAMC,EAAO,2BAAQf,KAAKM,OAAb,IAAoBJ,GAAIc,gBACrChB,KAAKH,MAAMoB,QAAQF,GACnBf,KAAKU,SAAS,CAAEP,KAAM,O,+BAItB,OACE,0BAAMT,UAAU,cAAcwB,SAAUlB,KAAKQ,cAC3C,6BACE,2BAAOW,QAAQ,SACf,2BACEjB,GAAG,OACHkB,KAAK,OACLC,SAAUrB,KAAKO,aACfK,KAAK,OACLC,MAAOb,KAAKM,MAAMH,QAGtB,4C,GApCkBR,cCiCX2B,E,kDAhCb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXiB,MAAO,IAET,EAAKN,QAAU,EAAKA,QAAQlB,KAAb,gBACf,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAND,E,oDASXgB,GACNf,KAAKU,SAAS,CAAEa,MAAM,GAAD,mBAAMvB,KAAKM,MAAMiB,OAAjB,CAAwBR,Q,iCAGpCS,GACTxB,KAAKU,SAAS,CACZa,MAAOvB,KAAKM,MAAMiB,MAAME,QAAO,SAACC,GAAD,OAAUA,EAAKxB,KAAOsB,S,+BAKvD,OACE,yBAAK9B,UAAU,YACb,kDACCM,KAAKM,MAAMiB,MAAMI,KAAI,SAACD,GAAD,OACpB,kBAAC,EAAD,CAAMvB,KAAMuB,EAAKvB,KAAMyB,IAAKF,EAAKxB,GAAIA,GAAIwB,EAAKxB,QAEhD,kBAAC,EAAD,CAAae,QAASjB,KAAKiB,e,GA3BZtB,aCgBRkC,E,kDAfb,WAAYhC,GAAQ,uCACZA,G,qDAIN,OACE,yBAAKH,UAAU,YACb,0DACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAVeC,a,MCQRmC,MARf,WACE,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,QCKcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f3e47d9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Pomodoro extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Pomodoro\">\r\n        <h1>Pomodoro goes here</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pomodoro;\r\n","import React, { Component } from \"react\";\r\nimport \"./Todo.css\";\r\n\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n  }\r\n\r\n  handleDelete() {\r\n    this.props.removeTodo(this.props.id);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Todo\">\r\n        <p>{this.props.desc}</p>\r\n        <button onClick={this.handleDelete}>Delete</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"./NewTodoForm.css\";\r\n\r\nclass NewTodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      desc: \"\",\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const newTodo = { ...this.state, id: uuid() };\r\n    this.props.addTodo(newTodo);\r\n    this.setState({ desc: \"\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n        <div>\r\n          <label htmlFor=\"desc\"></label>\r\n          <input\r\n            id=\"desc\"\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            name=\"desc\"\r\n            value={this.state.desc}\r\n          ></input>\r\n        </div>\r\n        <button>Add</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTodoForm;\r\n","import React, { Component } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todos: [],\r\n    };\r\n    this.addTodo = this.addTodo.bind(this);\r\n    this.removeTodo = this.removeTodo.bind(this);\r\n  }\r\n\r\n  addTodo(newTodo) {\r\n    this.setState({ todos: [...this.state.todos, newTodo] });\r\n  }\r\n\r\n  removeTodo(delTodoId) {\r\n    this.setState({\r\n      todos: this.state.todos.filter((todo) => todo.id !== delTodoId),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"TodoList\">\r\n        <h1>TodoList goes here</h1>\r\n        {this.state.todos.map((todo) => (\r\n          <Todo desc={todo.desc} key={todo.id} id={todo.id} />\r\n        ))}\r\n        <NewTodoForm addTodo={this.addTodo} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\r\nimport Pomodoro from \"./Pomodoro\";\r\nimport TodoList from \"./todoList/TodoList\";\r\n\r\nclass PomoTodo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"PomoTodo\">\r\n        <h1>Pomodoro TodoList Template</h1>\r\n        <Pomodoro />\r\n        <TodoList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PomoTodo;\r\n","import React from \"react\";\nimport PomoTodo from \"./components/PomoTodo\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PomoTodo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}